#!/bin/bash

#arguments 	-s, --sysprep: optionally sysprep original image
#		-o, --original: original image name
#		-c, --clone: name of cloned image
#               -p, --poweron: power on and connect via SSH
#		-l, --list: lists vms
while [[ $# > 0 ]]; do
    key="$1"
   #printf "%s is now being checked \n" $key
    case $key in 
        -l | --list)
        LIST=1
        ;;
	-s | --sysprep)
	SYSPREPOPT=1
	;;
	-p | --poweron)
	POWEROPT=1
	;;
	-o | --original)
	ORIGINAL="$2"
	shift
	;;
	-c | --clone)
	CLONE="$2"
	shift
	;;
    esac
shift
done

[[ ${LIST} -eq "1" ]] && { virsh list --all | awk 'NR >= 2 { print $2 }' | sed '/^\s*$/d'; exit 0; }

#[[ SYSPREPOPT -eq "1" ]]  && echo "Sys-Prep of original image selected"
#printf "Original path of image: %s\n" $ORIGINALPATH
#printf "Path of cloned image: %s\n" $CLONEPATH
#printf "Clone Name: %s\n" "$CLONENAME"

#set default libvirt images path
IMAGEPATH="/var/lib/libvirt/images/"


#Check if necessary argument exists
[[ -z "$ORIGINAL" ]] || [[ -z "$CLONE" ]] && { printf "Correct arguments not supplied \n -o | --original [Original VM Name]\n -c | --clone [Clone Name]\n -s | --sysprep \n -p | --poweron \n"; exit 1; }

#Check if original image exists
[[ -e "${IMAGEPATH}""${ORIGINAL}".qcow2 ]] && printf "Found %s!: %s\n" "${ORIGINAL}" "${IMAGEPATH}"
[[ -e "${IMAGEPATH}""${ORIGINAL}".qcow2 ]] || { printf "Unable to locate image %s\n" "${ORIGINAL}"; exit 1; }
 

#Check if image with same name of clone exists
#[[ -e "${IMAGEPATH}""${CLONE}".qcow2 ]] ||
[[ -e "${IMAGEPATH}""${CLONE}".qcow2 ]] && { printf "%s already exists! Please rename your clone\n" "${CLONE}"; exit 1; }


#function to clone with sysprep
#passed: $1=IMAGEPATH $2=ORIGINAL $3=CLONE
clone_with_sysprep() {
    #sysprep the original image
    virt-sysprep -d "${2}"
    
    #clone original to specified new image
    virt-clone --original "${2}" --name "${3}" --file "${1}${3}"
}

#passed: $1=IMAGEPATH $2=ORIGINAL $3=CLONE
clone_without_sysprep() {
    #clone original to specified new image
    virt-clone --original "${2}" --name "${3}" --file "${1}${3}"
}

[[ $SYSPREPOPT -eq 1 ]] &&  clone_with_sysprep "${IMAGEPATH}" "${ORIGINAL}" "${CLONE}"

[[ $SYSPREPOPT -ne 1 ]] &&  clone_without_sysprep "${IMAGEPATH}" "${ORIGINAL}" "${CLONE}"

#Loop till VM is created
until virsh dominfo ${CLONE} &> /dev/null
    do
	continue
    done

#If -p selected power on machine and connect
poweronandconnect() {
    virsh start ${CLONE}
  
    #extract mac address
    MAC=$(virsh dumpxml "${CLONE}" | grep -o -E '([[:xdigit:]]{1,2}:){5}[[:xdigit:]]{1,2}')
    printf "%s's MAC address is: %s \n" $CLONE $MAC
    #extract IP address
    ARPLOC=$(which arp) 

    until [[ -n $IP ]]; do
    	IP=$($ARPLOC | grep $MAC | awk '{print $1}')
    	done
    

    printf "%s's IP address is: %s \n" $CLONE $IP
  
    #loop until ping response
    until ping -c 1 -w 1 "$IP" &> /dev/null 
    do 
        echo "In ping loop"
	continue
    done

    echo "Launching SSH in bg and exiting"
    exec ssh root@${IP} 
}

[[ $POWEROPT -eq 1 ]] && poweronandconnect
exit 0  
